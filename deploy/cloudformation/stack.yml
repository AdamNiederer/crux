Parameters:
  SSHKeyPair:
    Type: String
    Default: "default_key"
  AmiImage:
    Type: String
Resources:

  # ============================================================================
  # Network resources

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: CruxCommonVPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  VPCGAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  RouteToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
    DependsOn:
      - InternetGateway

  CruxSN1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      CidrBlock: 10.0.128.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  CruxSN2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      CidrBlock: 10.0.144.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  CruxSN3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
      CidrBlock: 10.0.160.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  CruxRTA1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref CruxSN1
      RouteTableId: !Ref RouteTable

  CruxRTA2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref CruxSN2
      RouteTableId: !Ref RouteTable

  CruxRTA3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref CruxSN3
      RouteTableId: !Ref RouteTable

  # ============================================================================
  # Crux Instances Autoscaling group

  CruxSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Accept requests for Crux, HTTP, SSH, and ping'
      SecurityGroupIngress:
        - Description: ping
          IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: '8'
          ToPort: '-1'
        - Description: SSH
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          ToPort: '22'
        - Description: HTTP
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
        - Description: HTTPS
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '443'
          ToPort: '443'
        - Description: Crux HTTP server
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '3000'
          ToPort: '3000'
      VpcId: !Ref VPC

  CruxBoxRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns: ["arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"]
      Policies:
        -
          PolicyName: "s3_access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # TODO: limit to deployment artifact bucket
              -
                Effect: "Allow"
                Action: "s3:*"
                Resource: "*"

      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "autoscaling.amazonaws.com"
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  CruxBoxInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref CruxBoxRole

  CruxLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !Ref AmiImage
      InstanceType: t2.small
      KeyName: !Ref SSHKeyPair
      IamInstanceProfile: !Ref CruxBoxInstanceProfile
      SecurityGroups:
        - !Ref CruxSG

  CruxLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref CruxSG
      Subnets:
        - !Ref CruxSN1
        - !Ref CruxSN2
        - !Ref CruxSN3
      Type: application

  CruxLBTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckPort: '3000'
      HealthCheckTimeoutSeconds: 5
      Matcher:
        HttpCode: '200'
      Port: '3000'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  CruxLBL:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref CruxLBTG
          Type: forward
      LoadBalancerArn: !Ref CruxLB
      Port: '3000'
      Protocol: HTTP

  CruxASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: CruxASG
      LaunchConfigurationName: !Ref CruxLC
      MaxSize: 3
      MinSize: 1
      Tags:
        - Key: Name
          Value: CruxBox
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref CruxLBTG
      VPCZoneIdentifier:
        - !Ref CruxSN1
        - !Ref CruxSN2
        - !Ref CruxSN3

  # ============================================================================
  # Crux CodeDeploy Application

  CruxApplication:
    Type: AWS::CodeDeploy::Application

  CruxApplicationConfig:
    Type: AWS::CodeDeploy::DeploymentConfig
    Properties:
      MinimumHealthyHosts:
        Type: "HOST_COUNT"
        Value: 1

  CodeDeployServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns: ["arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"

        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  CruxApplicationDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CruxApplication
      DeploymentConfigName: !Ref CruxApplicationConfig
      AutoScalingGroups: [ !Ref CruxASG ]


      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL

      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt CruxLBTG.TargetGroupName
